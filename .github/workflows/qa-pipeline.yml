name: QA Pipeline

on:
  push:
    branches: [ main, develop, production ]
  pull_request:
    branches: [ main, develop, production ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_suite:
        description: 'Run full test suite'
        required: false
        default: 'false'

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 80

jobs:
  # Stage 1: Static Analysis
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: phpstan, phpcs, phpcbf
          coverage: none
          
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        
      - name: Run PHPStan
        run: vendor/bin/phpstan analyze --level=8 --error-format=github
        
      - name: Run PHP CodeSniffer
        run: vendor/bin/phpcs --standard=PSR12 --report=checkstyle app/ | cs2pr
        
      - name: Check for security vulnerabilities
        run: composer audit

  # Stage 2: Unit Tests
  unit-tests:
    name: Unit Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    needs: static-analysis
    
    strategy:
      fail-fast: false
      matrix:
        php: ['8.1', '8.2', '8.3']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, pdo, pdo_mysql, json, curl
          coverage: xdebug
          
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php${{ matrix.php }}-composer-
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
        
      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:cache
          
      - name: Run Unit Tests with Coverage
        run: vendor/bin/phpunit --testsuite=Unit --coverage-clover=coverage.xml --coverage-html=coverage-report
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          
      - name: Check coverage threshold
        run: |
          COVERAGE=$(vendor/bin/phpunit --testsuite=Unit --coverage-text --colors=never | grep -E '^\s*Lines' | awk '{print $2}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi
          
      - name: Archive coverage report
        if: matrix.php == '8.2'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report/

  # Stage 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: case_changer_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, json, curl, redis
          coverage: none
          
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
        
      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan migrate --force
          php artisan db:seed --class=TestSeeder
          
      - name: Run Integration Tests
        run: vendor/bin/phpunit --testsuite=Feature
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: case_changer_test
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          
      - name: Test all 172 transformation tools
        run: php artisan qa:test-transformations --all

  # Stage 4: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request' || github.event.inputs.full_suite == 'true'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: case_changer_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, json, curl
          coverage: none
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress
        
      - name: Install Node dependencies
        run: npm ci
        
      - name: Build assets
        run: npm run build
        
      - name: Prepare Laravel Application
        run: |
          cp .env.dusk.testing .env
          php artisan key:generate
          php artisan migrate --force
          
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &
        
      - name: Start Laravel Server
        run: php artisan serve --port=8000 &
        
      - name: Wait for server
        run: sleep 5
        
      - name: Run Laravel Dusk Tests
        run: php artisan dusk
        env:
          APP_URL: http://127.0.0.1:8000
          
      - name: Upload Dusk screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: dusk-screenshots
          path: tests/Browser/screenshots/
          
      - name: Upload Dusk console logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: dusk-console
          path: tests/Browser/console/

  # Stage 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' || github.event.inputs.full_suite == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, pdo, pdo_mysql, json, curl
          coverage: none
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
        
      - name: Prepare Laravel Application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan optimize
          
      - name: Start Laravel Server
        run: php artisan serve --port=8000 &
        
      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Run Performance Tests
        run: |
          k6 run tests/Performance/load-test.js --out json=performance-results.json
          
      - name: Analyze Performance Results
        run: php artisan qa:analyze-performance performance-results.json
        
      - name: Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-results.json

  # Stage 6: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: static-analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'case-changer'
          path: '.'
          format: 'HTML'
          
      - name: Upload OWASP report
        uses: actions/upload-artifact@v3
        with:
          name: owasp-report
          path: reports/

  # Quality Gates Check
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-tests, integration-tests]
    if: always()
    
    steps:
      - name: Check Quality Gates
        run: |
          if [[ "${{ needs.static-analysis.result }}" != "success" ]]; then
            echo "Static analysis failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          
          echo "All quality gates passed!"
          
      - name: Post results to Slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "QA Pipeline Results",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*QA Pipeline Results*\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref }}\n*Status:* ${{ job.status }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to staging (only on successful main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to staging
        run: echo "Deploying to staging environment..."
        # Add actual deployment steps here